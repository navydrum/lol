{"version":3,"sources":["components/RotationChampList.js","routes/Main.js","components/Gamerecods.js","routes/UserInfo.js","components/Navigation.js","components/ChampDetail.js","App.js","index.js"],"names":["RotationChampList","champList","console","log","champListArr","JSON","parse","className","map","value","index","to","pathname","state","key","Main","userId","rotateChamp","isComplete","getUserId","e","setState","target","getRotationChampList","a","axios","get","then","data","this","type","onChange","placeholder","id","React","Component","Gamerecods","win","kill","assist","death","lane","teamId","largestMultiKill","average","multiKilled","cnt","totalCnt","getMultiKilled","toFixed","UserInfo","props","getUserInfo","url","summoner","frex_tier","winningRate","sol_win","sol_losses","frexRate","frex_wins","frex_losses","issoloData","sol_wins","isfrexedData","isLarge","isfrex","userData","isLoading","location","undefined","history","push","name","summonerLevel","sol_tier","sol_rank","sol_leaguePoints","frex_rank","frex_leaguePoints","match","summonerName","kills","assists","deaths","Navigation","ChampDetail","getChampInfo","setChampInfo","champData","isLoaded","onMouseDetail","championspell","getSkillImage","bind","skillKey","isHovering","info_difficulty","item","onMouseOver","src","image_full","App","path","exact","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3873c231.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport './RotationChampList.css'\r\n\r\nfunction RotationChampList(champList) {\r\n    console.log(champList)\r\n    var champListArr = JSON.parse(champList.champList);\r\n\r\n    return (\r\n        <div className=\"bnrCont\">\r\n            <div className=\"bnr\">\r\n                {champListArr.map((value, index) => <Link to={{\r\n                    pathname : '/aboutChamp/{value}',\r\n                    state : {\r\n                        key : value\r\n                    }\r\n                }} key={index}><div className={'rotateChampArea champImg i'+value}></div></Link>)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n RotationChampList.propTypes = {\r\n    champList  :  PropTypes.string.isRequired\r\n}\r\n\r\nexport default RotationChampList;","import React from 'react';\r\nimport './Main.css';\r\nimport { Link } from 'react-router-dom';\r\nimport axios from \"axios\";\r\nimport RotationChampList from \"../components/RotationChampList\";\r\n//import bottomLogo from \"../img/riotLogo.png\";\r\n\r\nclass Main extends React.Component{\r\n    state = {\r\n        userId : '',\r\n        rotateChamp : [],\r\n        isComplete : false\r\n    }\r\n\r\n    getUserId = (e) => {\r\n        this.setState({ userId : e.target.value });\r\n    }\r\n    componentDidMount(){\r\n        console.log(\"componentDidMount\");\r\n        this.getRotationChampList();\r\n    }\r\n\r\n    getRotationChampList = async () => {\r\n        \r\n        const url = 'http://203.227.22.137:8000/api/champion/rotation';\r\n\r\n        await axios.get(url).then(data => {\r\n            console.log(\"getRotationChampList : \", data);\r\n            this.setState({ rotateChamp : data.data.data, isComplete : true });\r\n        });\r\n\r\n    }\r\n\r\n    render(){\r\n       const { userId, isComplete, rotateChamp } = this.state;\r\n       return (\r\n        <div className=\"mainContainer\">\r\n            <div className=\"main_logo_area\">\r\n                <div className=\"main_logo\"></div>\r\n            </div>\r\n            <form className=\"user_search_form\">\r\n                <input type=\"text\" className=\"user_search_form_text\" value={userId} onChange={this.getUserId} placeholder=\"소환사명, 소환사명, ...\" />\r\n                <Link to = {{\r\n                pathname : `/userInfo/${this.state.userId}`,\r\n                state : {\r\n                    id : this.state.userId\r\n                }\r\n                }}><button className=\"user_search_form_button\"><i className=\"search_button_img\">dddd</i></button></Link>\r\n            </form>\r\n            <div className=\"rotateChampionArea\">\r\n             {isComplete ? \r\n             <RotationChampList \r\n                key = {rotateChamp.id}\r\n                champList = {rotateChamp.champList}/> : \"\"\r\n             }\r\n            </div>   \r\n            <div className=\"footerContainer\">\r\n                <table className=\"footerTable\">\r\n                    <tbody>\r\n                        <tr>\r\n                            <td></td>\r\n                            <td></td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>    \r\n       </div> \r\n       )\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Gamerecods.css\"\r\n\r\nfunction Gamerecods({ id, win, kill, assist, death, lane, teamId, largestMultiKill }) {\r\n    console.log(\"recod : \", id);\r\n    console.log(\"win : \", win);\r\n    \r\n    var average = (kill + assist)/death;\r\n\r\n    var multiKilled = getMultiKilled(largestMultiKill);\r\n\r\n    return (\r\n        <div className=\"recods\">\r\n            <div className={win ? \"recods_data_win\" : \"recods_data_lose\"}>\r\n                <div className=\"gameResult\">\r\n                    <div className=\"gameType\"></div>\r\n                    <div className=\"playLane\">{ lane }</div>\r\n                    <div className={teamId === 100 ? \"blueTeam\" : \"redTeam\"}>{win ? \"승리\" : \"패배\"}</div>\r\n                </div>\r\n                <div className=\"gameResultInfo\">\r\n                    <div className=\"KDA\">\r\n                        <span className=\"KDA_kill\">{ kill }</span>/\r\n                        <span className=\"KDA_death\">{ death }</span>/\r\n                        <span className=\"KDA_assist\">{ assist}</span>\r\n                    </div>\r\n                    <div className=\"aver\">{average.toFixed(2)} 평점</div>\r\n                    <div className=\"multKilled\">{ multiKilled }</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    \r\n    )\r\n}\r\n\r\nfunction getMultiKilled(cnt){\r\n    var totalCnt;\r\n    if(cnt === 2){\r\n        totalCnt = \"더블킬\";\r\n    }else if(cnt === 3){\r\n        totalCnt = \"트리플킬\";\r\n    }else if(cnt === 4){\r\n        totalCnt = \"쿼드라킬\";\r\n    }else if(cnt === 5){\r\n        totalCnt = \"펜타킬\";\r\n    }else{\r\n        totalCnt = '';\r\n    }\r\n\r\n    return totalCnt;\r\n}\r\n\r\n\r\nGamerecods.propTypes = {\r\n    id : PropTypes.string.isRequired,\r\n    win :  PropTypes.bool.isRequired,\r\n    kill : PropTypes.number.isRequired,\r\n    assist : PropTypes.number.isRequired,\r\n    death : PropTypes.number.isRequired,\r\n    lane : PropTypes.string.isRequired,\r\n    teamId : PropTypes.number.isRequired,\r\n    largestMultiKill : PropTypes.number.isRequired\r\n}\r\n\r\nexport default Gamerecods;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Gamerecods from \"../components/Gamerecods\";\r\n\r\nclass UserInfo extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n\r\n        console.log(\"props : \", props);\r\n        if(props.location.state){\r\n            this.state = {\r\n                isLoading : true,\r\n                id : props.location.state.id,\r\n                isLarge : true,\r\n                isfrex : true,\r\n                isfrexedData : true,\r\n                issoloData : true,\r\n                userData : []\r\n            };\r\n        }\r\n        \r\n    }\r\n\r\n    getUserInfo = async () => {\r\n        console.log(\"state : \", this.state.id);\r\n        const url = 'http://203.227.22.137:8000/api/matchinfo/list/summoner/' + this.state.id;\r\n        //const url = 'http://203.227.22.114:8000/api/matchinfo/list/summoner/' + this.state.id;\r\n \r\n        await axios.get(url).then(data => {\r\n            console.log(\"data : \",data);\r\n            console.log(\"data.data.data.summoner.frex_tier : \", data.data.data.summoner.frex_tier);\r\n            var winningRate = (data.data.data.summoner.sol_win/(data.data.data.summoner.sol_win + data.data.data.summoner.sol_losses))*100;\r\n            var frexRate = (data.data.data.summoner.frex_wins/(data.data.data.summoner.frex_wins + data.data.data.summoner.frex_losses))*100;\r\n            this.issoloData = data.data.data.summoner.sol_wins === \"-1\" && data.data.data.summoner.sol_losses === \"-1\" ? false : true;\r\n            this.isfrexedData = data.data.data.summoner.frex_wins === \"-1\" &&  data.data.data.summoner.frex_losses === \"-1\" ? false : true;\r\n            this.isLarge = winningRate > 50 ? true : false;\r\n            this.isfrex = frexRate > 50 ? true : false;\r\n\r\n            this.setState({userData : data.data.data, isLoading : false, isLarge : this.isLarge, isfrex : this.isfrex, issoloData : this.issoloData, isfrexedData : this.isfrexedData});\r\n           \r\n\r\n           // this.setState({userData : data.data.data, isLoading : false});\r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        if(this.props.location.state === undefined){\r\n            this.props.history.push(\"/\");\r\n        }else{\r\n            this.getUserInfo();\r\n        }\r\n    }\r\n\r\n    render(){\r\n        \r\n        console.log(\"property : \", this.props);\r\n        console.log(this.state)\r\n\r\n        if(this.props.location.state){\r\n\r\n            console.log(\"data : \", this.state.userData);\r\n            const { isLoading, userData, isLarge, isfrex, issoloData, isfrexedData } = this.state;\r\n            console.log(\"param\", this.state);\r\n            return (\r\n                <div>\r\n                    {isLoading ? (\r\n                        <div className=\"Loader\">\r\n                          <span className=\"Loader_text\">Loading...</span>\r\n                        </div>\r\n                        ) : ( \r\n                        <div className=\"recodsContainer\">\r\n                            <div className=\"userInfoContainer\">\r\n                                <div className=\"userInfoArea\">\r\n                                    <div className=\"row\">\r\n                                        <div className=\"userColumn\">\r\n                                            <div className=\"userTierImg\"></div>\r\n                                            <div className=\"userName\">\r\n                                                <span className=\"_userID\">{userData.summoner.name}</span>\r\n                                                <span className=\"userLevel\">Lv.{userData.summoner.summonerLevel}</span>\r\n                                                <div className=\"userTotalRecods\">\r\n                                                    <div className=\"soloRankRecods\">\r\n                                                        솔랭\r\n                                                        <div className=\"userTier\">{userData.summoner.sol_tier}{userData.summoner.sol_rank}</div>\r\n                                                        <div className=\"userRecods\"><span>{userData.summoner.sol_leaguePoints}LP</span> / <span>{userData.summoner.sol_wins}승 {userData.summoner.sol_losses}패</span></div>\r\n                                                        <div className={isLarge ? \"userWinRate\" : \"userLoseRate\"}>승률{((userData.summoner.sol_wins/(userData.summoner.sol_wins + userData.summoner.sol_losses))*100).toFixed(2)}%</div>\r\n                                                    </div>\r\n                                                    <div className=\"freeRankRecods\">\r\n                                                        자유랭크\r\n                                                        {isfrexedData ?\r\n                                                            <div>\r\n                                                                <div className=\"userTier\">{userData.summoner.frex_tier}{userData.summoner.frex_rank}</div>\r\n                                                                <div className=\"userRecods\"><span>{userData.summoner.frex_leaguePoints}LP</span> / <span>{userData.summoner.frex_wins}승 {userData.summoner.frex_losses}패</span></div>\r\n                                                                <div className={isfrex ? \"freeWinRate\" : \"freeLoseRate\"}>승률{((userData.summoner.frex_wins/(userData.summoner.frex_wins + userData.summoner.frex_losses))*100).toFixed(2)}%</div>\r\n                                                            </div>\r\n                                                                :\r\n                                                            <div className=\"unranked\">\r\n                                                                unranked\r\n                                                            </div>\r\n                                                        }\r\n                                                        \r\n                                                    </div>\r\n                                                </div>\r\n                                               \r\n                                            </div>\r\n                                        </div>\r\n                                    <div className=\"userColumn\"></div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"gameResultContainer\">\r\n                            {userData.match.map(data => (\r\n                                <Gamerecods\r\n                                key = {data.id}\r\n                                id = {data.summonerName}\r\n                                win = {data.win}\r\n                                kill = {data.kills}\r\n                                assist = {data.assists}\r\n                                death = {data.deaths}\r\n                                lane = {data.lane}\r\n                                teamId = {data.teamId}\r\n                                largestMultiKill = {data.largestMultiKill}\r\n                            />\r\n                            ))}\r\n                            </div>\r\n                        </div>)}\r\n                </div>\r\n            )\r\n        }else{\r\n            return <span>nullnullnullnullnullnull</span>\r\n        }\r\n    }\r\n}\r\nexport default UserInfo;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport './Navigation.css'\r\n\r\nfunction Navigation() {\r\n    return (\r\n    <nav id=\"nav\">\r\n        <ul>\r\n            <li><Link to=\"/\">홈</Link></li>\r\n            <li><Link to=\"/\">챔피언 분석</Link></li>\r\n            <li><Link to=\"/\">통계</Link></li>\r\n            <li><Link to=\"/\">랭킹</Link></li>\r\n            <li><Link to=\"/\">프로관전</Link></li>\r\n            <li><Link to=\"/\">커뮤니티</Link></li>\r\n        </ul>\r\n    </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport \"./ChampDetail.css\";\r\n\r\nclass ChampDetail extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        console.log(\"props : \", props);\r\n        if(props.location.state){\r\n            this.onMouseDetail = this.onMouseDetail.bind(this);\r\n            this.state = {\r\n                key : this.props.location.state.key,\r\n                champData : [],\r\n                isLoaded : false,\r\n                skillKey : [\"Q\", \"W\", \"E\", \"R\", \"P\"]\r\n            };\r\n        }\r\n        \r\n    }\r\n    componentDidMount(){\r\n        console.log(this.props);\r\n        const { location, history } = this.props;\r\n        if(location.state === undefined){\r\n            history.push(\"/\");\r\n        }else{\r\n            this.getChampInfo();\r\n        }\r\n        console.log(location.state);\r\n    }\r\n\r\n    getChampInfo = async () => {\r\n\r\n\r\n        console.log(\"this.state : \", this.state);\r\n\r\n        const url = 'http://203.227.22.137:8000/api/champion/info/' + this.state.key;\r\n\r\n        await axios.get(url).then(data => {\r\n            this.setChampInfo(data.data.data);\r\n        });\r\n    }\r\n\r\n    setChampInfo = (data) => {\r\n        console.log(data);\r\n        this.setState({champData : data, isLoaded : true});\r\n    }\r\n\r\n    onMouseDetail = (e) => {\r\n        console.log(e);\r\n        console.log(this.state.champData.championspell[e]);\r\n        console.log(this.state.champData.championspell[e].name);\r\n        return (\r\n            <div className=\"test11\">\r\n                {this.state.champData.championspell[e].name}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getSkillImage =(data) => {\r\n        return 'http://203.227.22.137:8000/static' + data;\r\n    }\r\n    \r\n    render(){\r\n      console.log(\"renderState : \", this.state);\r\n      if(this.state){\r\n        const {isLoaded, champData, skillKey, isHovering} = this.state;\r\n        return (\r\n            <div className=\"champDetailContainer\">\r\n                {isLoaded ? \r\n                (<div className=\"champDetailHeader\">\r\n                    <ul className=\"champDetailPosition\">\r\n                    </ul>\r\n                    <div className=\"champDetailInfo\">\r\n                        <div className=\"champDetailImgArea\">\r\n                            <img className={'rotateChampArea champImg i'+champData.key}></img>\r\n                        </div>\r\n                        <h1 className=\"champDetailName\">{champData.name}</h1>\r\n                        <div className=\"champDetailTier\">{champData.info_difficulty}</div>\r\n                        <div className=\"champDetailSkill\">{\r\n                            champData.championspell.map( (item, index) => \r\n                                <div className=\"_skill\" key={item.id}>\r\n                                    <a onMouseOver={() => this.onMouseDetail(index)}> \r\n                                        <img src={this.getSkillImage(item.image_full)}></img>\r\n                                        <span className=\"_key\">{skillKey[index]}</span>\r\n                                    </a>\r\n                                </div>\r\n                            )\r\n                        }</div>\r\n                    </div>\r\n                </div>) \r\n                : \r\n                (<div>\r\n\r\n                </div>)}\r\n            </div>\r\n        );\r\n      }else{\r\n        return <div><span>isLoading...</span></div>\r\n      }\r\n    }\r\n}\r\nexport default ChampDetail;","import React from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\nimport Main from \"./routes/Main\";\nimport UserInfo from \"./routes/UserInfo\";\nimport Navigation from \"./components/Navigation\";\nimport ChampDetail from \"./components/ChampDetail\";\nimport './components/Navigation.css'\n\nfunction App() {\n  return (\n    <HashRouter>\n        <Navigation />\n        <Route path=\"/\" exact={ true } component={Main}/>\n        <Route path=\"/userInfo/:id\" component={UserInfo}/>\n        <Route path=\"/aboutChamp/:value\" component={ChampDetail}/>\n    </HashRouter>\n  )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}